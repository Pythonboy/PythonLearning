NumPy提供了多种存取数组内容的文件操作函数。保存数组数据的文件可以是二进制格式或者文本格式。二进制格式的文件又分为NumPy专用的格式化二进
制类型和无格式类型。

一，tofile()和fromfile()
tofile()将数组中的数据以二进制格式写进文件
tofile()输出的数据不保存数组形状和元素类型等信息
fromfile()函数读回数据时需要用户指定元素类型，并对数组的形状进行适当的修改

a = np.arange(0,12);
a.shape = 3,4
print(a)
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
 
 a.tofile("1");
print(a.dtype);
b = np.fromfile("1",dtype = np.int); #必须按照a.dtype来读入数据
print(b);
b.shape = 3,4;
print(b);
int32
[ 0  1  2  3  4  5  6  7  8  9 10 11]
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]

从上面的例子可以看出，在读入数据时:需要正确设置dtype参数，并修改数组的shape属性才能得到和原始数据一致的结果。无论数据的排列顺序是C语言
格式还是Fortran语言格式，tofile()都统一使用C语言格式输出。此外如果指定了sep参数，则fromfile()和tofile()将以文本格式对数组进行输入输
出。sep参数指定的是文本数据中数值的分隔符。



二.save()和load()
NumPy专用的二进制格式保存数据，它们会自动处理元素类型和形状等信息
如果想将多个数组保存到一个文件中，可以使用savez()
savez()的第一个参数是文件名，其后的参数都是需要保存的数组，也可以使用关键字参数为数组起名
非关键字参数传递的数组会自动起名为arr_0、arr_1、...。
savez()输出的是一个扩展名为npz的压缩文件，其中每个文件都是一个save()保存的npy文件，文件名和数组名相同
load()自动识别npz文件，并且返回一个类似于字典的对象，可以通过数组名作为键获取数组的内容

np.save("a.npy",a);
c = np.load("a.npy");
print(c)
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
 
 b = np.linspace(1,3,4);
c = np.sin(b);
np.savez("result.npz",a,b,c_array = c);
r = np.load("result.npz");
print(r["arr_0"]) #a数组
print(r["arr_1"]) #b数组
print(r["c_array"])#c数组
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
[1.         1.66666667 2.33333333 3.        ]
[0.84147098 0.99540796 0.72308588 0.14112001]


三.savetxt()和loadtxt()
读写1维和2维数组的文本文件
可以用它们读写CSV格式的文本文件
a = np.arange(0,12,0.5).reshape(4,-1);
np.savetxt('a.txt',a);
b = np.loadtxt('a.txt');
print(b);
np.savetxt('a1.txt',a,fmt='%d',delimiter = ",");
c = np.loadtxt('a1.txt',delimiter=",");
print(c);
[[ 0.   0.5  1.   1.5  2.   2.5]
 [ 3.   3.5  4.   4.5  5.   5.5]
 [ 6.   6.5  7.   7.5  8.   8.5]
 [ 9.   9.5 10.  10.5 11.  11.5]]
[[ 0.  0.  1.  1.  2.  2.]
 [ 3.  3.  4.  4.  5.  5.]
 [ 6.  6.  7.  7.  8.  8.]
 [ 9.  9. 10. 10. 11. 11.]]

tmp = np.loadtxt("test.csv",dtype = np.str,delimiter = ",");
data = tmp[1:,1:].astype(np.float);
print(data);

四.file操作
a = np.arange(0,8);
b = np.cumsum(a);
c = a+b;
f = file("result.npy","wb");
np.save(f,a);
mp.save(f,b);
np.save(f,c); #按顺序将a,b,c保存进文件对象f
f.close();
f = file("result.npy","rb");
a = np.load(f);
print(a);
c = np.load(f);
print(c);
b = np.load(f);
print(b);  #按顺序从文件对象f中读取内容

























